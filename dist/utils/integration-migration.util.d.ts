import { Neo4jService } from '../core/database/neo4j';
export declare class IntegrationMigrationUtil {
    private neo4j;
    private requirementsService;
    private decisionService;
    private patternService;
    private technologyStackService;
    private integrationService;
    private recommendationEngine;
    private validationService;
    constructor(neo4j: Neo4jService);
    /**
     * Migrate existing project data to use the new integration layer
     */
    migrateProjectIntegration(projectId: string, options?: MigrationOptions): Promise<MigrationResult>;
    /**
     * Migrate all projects in the system
     */
    migrateAllProjects(options?: MigrationOptions): Promise<BatchMigrationResult>;
    /**
     * Rollback integration migration for a project
     */
    rollbackMigration(projectId: string): Promise<RollbackResult>;
    /**
     * Export integration data for backup or analysis
     */
    exportIntegrationData(projectId: string): Promise<IntegrationDataExport>;
    /**
     * Import integration data from backup
     */
    importIntegrationData(exportData: IntegrationDataExport): Promise<ImportResult>;
    private performDataDiscovery;
    private createMissingComponents;
    private generateAutomaticMappings;
    private validateMigratedAlignments;
    private assessMigrationQuality;
    private generateMigrationRecommendations;
    private findUnmappedRequirements;
    private findUnmappedArchitectureDecisions;
    private getAllProjects;
    private aggregateStatistics;
    private calculateQualityScore;
    private generateQualityRecommendations;
    private cleanupMappings;
    private cleanupAlignments;
    private cleanupAutoGeneratedComponents;
    private exportRequirements;
    private exportArchitectureDecisions;
    private exportPatterns;
    private exportTechnologyStacks;
    private exportMappings;
    private exportAlignments;
    private exportRecommendations;
    private recreateRequirement;
    private recreateArchitectureDecision;
    private recreateMapping;
    private recreateAlignment;
    private getMappingsForProject;
    private createDefaultPatterns;
    private createDefaultTechnologyStacks;
}
interface MigrationOptions {
    confidenceThreshold?: number;
    createMissingComponents?: boolean;
    validateAlignments?: boolean;
    dryRun?: boolean;
}
interface MigrationResult {
    projectId: string;
    startTime: string;
    endTime?: string;
    totalDuration?: number;
    phase: string;
    success: boolean;
    phases: MigrationPhase[];
    statistics: MigrationStatistics;
    errors: string[];
    recommendations: string[];
}
interface MigrationPhase {
    name: string;
    status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | 'PARTIAL';
    duration: number;
    details: any;
}
interface MigrationStatistics {
    requirementsProcessed: number;
    architectureDecisionsProcessed: number;
    mappingsCreated: number;
    alignmentsValidated: number;
    errorsEncountered: number;
}
interface BatchMigrationResult {
    totalProjects: number;
    successfulMigrations: number;
    failedMigrations: number;
    totalDuration: number;
    results: MigrationResult[];
    overallStatistics: MigrationStatistics;
}
interface RollbackResult {
    projectId: string;
    success: boolean;
    duration: number;
    rollbackActions: RollbackAction[];
    completedAt: string;
}
interface RollbackAction {
    action: string;
    description: string;
    success: boolean;
}
interface IntegrationDataExport {
    projectId: string;
    exportedAt: string;
    version: string;
    data: {
        requirements: any[];
        architectureDecisions: any[];
        patterns: any[];
        technologyStacks: any[];
        mappings: any[];
        alignments: any[];
        recommendations: any[];
    };
    metadata: {
        totalRequirements: number;
        totalArchitectureDecisions: number;
        totalMappings: number;
        totalAlignments: number;
    };
}
interface ImportResult {
    projectId: string;
    success: boolean;
    importedItems: {
        requirements: number;
        architectureDecisions: number;
        mappings: number;
        alignments: number;
    };
    errors: string[];
    warnings: string[];
}
export {};
//# sourceMappingURL=integration-migration.util.d.ts.map