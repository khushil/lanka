export declare const requirementsTypeDefs = "\n  enum RequirementType {\n    BUSINESS\n    FUNCTIONAL\n    NON_FUNCTIONAL\n    USER_STORY\n    ACCEPTANCE_CRITERIA\n    BUSINESS_RULE\n    COMPLIANCE\n  }\n\n  enum RequirementStatus {\n    DRAFT\n    REVIEW\n    APPROVED\n    IMPLEMENTED\n    VALIDATED\n    DEPRECATED\n  }\n\n  enum RequirementPriority {\n    CRITICAL\n    HIGH\n    MEDIUM\n    LOW\n  }\n\n  type Requirement {\n    id: ID!\n    title: String!\n    description: String!\n    type: RequirementType!\n    status: RequirementStatus!\n    priority: RequirementPriority\n    createdAt: Date!\n    updatedAt: Date\n    project: Project\n    stakeholder: Stakeholder\n    completenessScore: Float\n    qualityScore: Float\n    acceptanceCriteria: [String]\n    businessValue: String\n    dependencies: [Requirement]\n    similarRequirements: [SimilarRequirement]\n    conflicts: [RequirementConflict]\n  }\n\n  type SimilarRequirement {\n    requirement: Requirement!\n    similarity: Float!\n    projectName: String!\n    successMetrics: SuccessMetrics\n    adaptationGuidelines: [String]\n  }\n\n  type SuccessMetrics {\n    implementationTime: Int\n    defectRate: Float\n    stakeholderSatisfaction: Float\n  }\n\n  type RequirementConflict {\n    id: ID!\n    requirement1: Requirement!\n    requirement2: Requirement!\n    conflictType: String!\n    description: String!\n    severity: String!\n    resolutionSuggestions: [String]\n    status: String!\n  }\n\n  type RequirementPattern {\n    id: ID!\n    name: String!\n    description: String!\n    type: RequirementType!\n    template: String!\n    applicabilityConditions: [String]\n    successRate: Float\n    adoptionRate: Float\n    examples: [String]\n  }\n\n  type RequirementAnalysis {\n    requirement: Requirement!\n    completenessScore: Float!\n    qualityScore: Float!\n    suggestions: [String]\n    similarRequirements: [SimilarRequirement]\n    recommendedExperts: [Expert]\n  }\n\n  type Expert {\n    id: ID!\n    name: String!\n    email: String\n    expertise: [String]\n    successRate: Float\n  }\n\n  type Project {\n    id: ID!\n    name: String!\n    description: String\n    requirements: [Requirement]\n    createdAt: Date!\n  }\n\n  type Stakeholder {\n    id: ID!\n    name: String!\n    email: String!\n    role: String\n    requirements: [Requirement]\n  }\n\n  input CreateRequirementInput {\n    title: String\n    description: String!\n    type: RequirementType\n    projectId: ID!\n    stakeholderId: ID!\n    priority: RequirementPriority\n    acceptanceCriteria: [String]\n    businessValue: String\n  }\n\n  input UpdateRequirementInput {\n    title: String\n    description: String\n    type: RequirementType\n    status: RequirementStatus\n    priority: RequirementPriority\n    acceptanceCriteria: [String]\n    businessValue: String\n  }\n\n  extend type Query {\n    requirement(id: ID!): Requirement\n    requirements(\n      projectId: ID\n      type: RequirementType\n      status: RequirementStatus\n      limit: Int = 20\n      offset: Int = 0\n    ): [Requirement]\n    \n    findSimilarRequirements(\n      requirementId: ID!\n      threshold: Float = 0.7\n    ): [SimilarRequirement]\n    \n    detectConflicts(requirementId: ID!): [RequirementConflict]\n    \n    extractPatterns(projectId: ID!): [RequirementPattern]\n    \n    analyzeRequirement(description: String!): RequirementAnalysis\n  }\n\n  extend type Mutation {\n    createRequirement(input: CreateRequirementInput!): Requirement\n    \n    updateRequirement(\n      id: ID!\n      input: UpdateRequirementInput!\n    ): Requirement\n    \n    approveRequirement(id: ID!): Requirement\n    \n    linkRequirements(\n      requirement1Id: ID!\n      requirement2Id: ID!\n      relationship: String!\n    ): Boolean\n    \n    resolveConflict(\n      conflictId: ID!\n      resolution: String!\n    ): RequirementConflict\n  }\n";
//# sourceMappingURL=requirements.schema.d.ts.map