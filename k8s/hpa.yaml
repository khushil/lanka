# Horizontal Pod Autoscaler for Lanka Platform API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: lanka-platform-api-hpa
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lanka-platform-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
    # CPU utilization
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    # Memory utilization  
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    # Custom metrics from Prometheus
    - type: Pods
      pods:
        metric:
          name: http_requests_per_second
        target:
          type: AverageValue
          averageValue: "100"
    - type: Pods
      pods:
        metric:
          name: response_time_95th_percentile
        target:
          type: AverageValue
          averageValue: "2"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30
        - type: Pods
          value: 4
          periodSeconds: 30
      selectPolicy: Max
---
# Horizontal Pod Autoscaler for Lanka Platform Client
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: lanka-platform-client-hpa
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lanka-platform-client
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30
---
# Horizontal Pod Autoscaler for Lanka Platform Worker
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: lanka-platform-worker-hpa
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lanka-platform-worker
  minReplicas: 2
  maxReplicas: 15
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 85
    # Queue depth metric for background processing
    - type: Pods
      pods:
        metric:
          name: queue_depth
        target:
          type: AverageValue
          averageValue: "10"
    # Memory pressure metric
    - type: Pods
      pods:
        metric:
          name: memory_pressure_ratio
        target:
          type: AverageValue
          averageValue: "0.8"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # Longer stabilization for workers
      policies:
        - type: Percent
          value: 25
          periodSeconds: 120
        - type: Pods
          value: 1
          periodSeconds: 120
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
        - type: Percent
          value: 200
          periodSeconds: 60
        - type: Pods
          value: 3
          periodSeconds: 60
      selectPolicy: Max
---
# Vertical Pod Autoscaler for optimal resource allocation
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: lanka-platform-api-vpa
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lanka-platform-api
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: api
        maxAllowed:
          cpu: 2
          memory: 2Gi
        minAllowed:
          cpu: 100m
          memory: 128Mi
        controlledResources: ["cpu", "memory"]
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: lanka-platform-worker-vpa
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lanka-platform-worker
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: worker
        maxAllowed:
          cpu: 4
          memory: 4Gi
        minAllowed:
          cpu: 200m
          memory: 256Mi
        controlledResources: ["cpu", "memory"]
---
# Pod Disruption Budget to ensure availability during updates
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: lanka-platform-api-pdb
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: lanka-platform
      app.kubernetes.io/component: api
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: lanka-platform-client-pdb
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: lanka-platform
      app.kubernetes.io/component: client
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: lanka-platform-worker-pdb
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: lanka-platform
      app.kubernetes.io/component: worker
---
# Cluster Autoscaler for node scaling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    app: cluster-autoscaler
spec:
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8085'
    spec:
      serviceAccountName: cluster-autoscaler
      tolerations:
        - effect: NoSchedule
          operator: "Equal"
          value: "true"
          key: node-role.kubernetes.io/master
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
      containers:
        - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.28.2
          name: cluster-autoscaler
          resources:
            limits:
              cpu: 100m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 600Mi
          command:
            - ./cluster-autoscaler
            - --v=4
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
            - --expander=least-waste
            - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/CLUSTER_NAME
            - --balance-similar-node-groups
            - --scale-down-enabled=true
            - --scale-down-delay-after-add=10m
            - --scale-down-unneeded-time=10m
            - --scale-down-utilization-threshold=0.5
            - --max-node-provision-time=15m
            - --scan-interval=10s
          volumeMounts:
            - name: ssl-certs
              mountPath: /etc/ssl/certs/ca-certificates.crt
              readOnly: true
          imagePullPolicy: "Always"
          env:
            - name: AWS_REGION
              value: us-west-2
      volumes:
        - name: ssl-certs
          hostPath:
            path: "/etc/ssl/certs/ca-bundle.crt"