apiVersion: apps/v1
kind: Deployment
metadata:
  name: lanka-platform-api
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: lanka-platform
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lanka-platform
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: lanka-platform-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: api
          image: lanka-platform/api:1.0.0
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: NODE_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: PORT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: LOG_LEVEL
            - name: NEO4J_HOST
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: NEO4J_HOST
            - name: NEO4J_PORT
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: NEO4J_PORT
            - name: NEO4J_USERNAME
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: NEO4J_USERNAME
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: NEO4J_PASSWORD
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: REDIS_PORT
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: REDIS_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: JWT_SECRET
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lanka-platform-client
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: client
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: lanka-platform
      app.kubernetes.io/component: client
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lanka-platform
        app.kubernetes.io/component: client
        app.kubernetes.io/version: "1.0.0"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: nginx
          image: nginx:1.25-alpine
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: true
            - name: static-content
              mountPath: /usr/share/nginx/html
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
      initContainers:
        - name: copy-static
          image: lanka-platform/client:1.0.0
          command: ['sh', '-c', 'cp -r /app/build/* /static/']
          volumeMounts:
            - name: static-content
              mountPath: /static
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: nginx-config
          configMap:
            name: lanka-platform-nginx-config
        - name: static-content
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lanka-platform-worker
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: lanka-platform
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lanka-platform
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: lanka-platform-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: worker
          image: lanka-platform/worker:1.0.0
          imagePullPolicy: Always
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: NODE_ENV
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: LOG_LEVEL
            - name: NEO4J_HOST
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: NEO4J_HOST
            - name: NEO4J_USERNAME
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: NEO4J_USERNAME
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: NEO4J_PASSWORD
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: lanka-platform-config
                  key: REDIS_HOST
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lanka-platform-secrets
                  key: REDIS_PASSWORD
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "ps aux | grep '[n]ode' || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
        role: memory-intensive
      tolerations:
        - key: "memory-intensive"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
---
# Service Account for Lanka Platform
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lanka-platform-sa
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: serviceaccount
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/lanka-platform-role
---
# RBAC for Lanka Platform
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: lanka-platform-role
  namespace: lanka-platform
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: lanka-platform-binding
  namespace: lanka-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: lanka-platform-role
subjects:
  - kind: ServiceAccount
    name: lanka-platform-sa
    namespace: lanka-platform