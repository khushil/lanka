# Lanka Platform Secrets Management
# Note: This file contains placeholder secrets that should be replaced with actual values
# and managed through a proper secret management system like AWS Secrets Manager or Vault

apiVersion: v1
kind: Secret
metadata:
  name: lanka-platform-secrets
  namespace: lanka-platform
  labels:
    app.kubernetes.io/name: lanka-platform
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database Credentials
  NEO4J_USERNAME: "neo4j"
  NEO4J_PASSWORD: "REPLACE_WITH_ACTUAL_PASSWORD"
  
  # Redis Authentication
  REDIS_PASSWORD: "REPLACE_WITH_ACTUAL_REDIS_PASSWORD"
  
  # JWT Configuration
  JWT_SECRET: "REPLACE_WITH_ACTUAL_JWT_SECRET"
  JWT_REFRESH_SECRET: "REPLACE_WITH_ACTUAL_JWT_REFRESH_SECRET"
  
  # Encryption Keys
  ENCRYPTION_KEY: "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY"
  
  # API Keys
  API_SECRET_KEY: "REPLACE_WITH_ACTUAL_API_SECRET"
  
  # Third-party Integrations
  GITHUB_TOKEN: "REPLACE_WITH_GITHUB_TOKEN"
  SLACK_WEBHOOK_URL: "REPLACE_WITH_SLACK_WEBHOOK"
  
  # SSL/TLS Certificates (if needed)
  TLS_CERT: "REPLACE_WITH_TLS_CERT"
  TLS_KEY: "REPLACE_WITH_TLS_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Grafana Admin Credentials
  GF_SECURITY_ADMIN_USER: "admin"
  GF_SECURITY_ADMIN_PASSWORD: "REPLACE_WITH_GRAFANA_PASSWORD"
  
  # AlertManager Configuration
  alertmanager-config: |
    global:
      slack_api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
    
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
    
    receivers:
      - name: 'web.hook'
        slack_configs:
          - channel: '#alerts'
            title: "Lanka Platform Alert"
            text: "{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}{{ end }}"
---
# External Secrets Operator configuration for AWS Secrets Manager integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secretsmanager
  namespace: lanka-platform
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: lanka-platform-external-secrets
  namespace: lanka-platform
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secretsmanager
    kind: SecretStore
  target:
    name: lanka-platform-external-secrets
    creationPolicy: Owner
  data:
    - secretKey: NEO4J_PASSWORD
      remoteRef:
        key: lanka-platform/neo4j
        property: password
    - secretKey: REDIS_PASSWORD  
      remoteRef:
        key: lanka-platform/redis
        property: auth_token
    - secretKey: JWT_SECRET
      remoteRef:
        key: lanka-platform/jwt
        property: secret
---
# Service Account for external secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: lanka-platform
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/external-secrets-role
---
# RBAC for External Secrets Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-reader
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: ["external-secrets.io"]
    resources: ["secretstores", "externalsecrets", "clustersecretstores"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-reader
subjects:
  - kind: ServiceAccount
    name: external-secrets-sa
    namespace: lanka-platform
---
# Sealed Secrets for GitOps (alternative approach)
apiVersion: v1
kind: Secret
metadata:
  name: sealed-secrets-controller-tls
  namespace: kube-system
  labels:
    sealedsecrets.bitnami.com/sealed-secrets-key: active
type: kubernetes.io/tls
data:
  tls.crt: REPLACE_WITH_SEALED_SECRETS_CERT
  tls.key: REPLACE_WITH_SEALED_SECRETS_KEY