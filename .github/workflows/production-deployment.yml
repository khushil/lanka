name: Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - hotfix
      version:
        description: 'Version to deploy'
        required: false
        type: string
      skip_tests:
        description: 'Skip test suite'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Validate deployment
        id: validation
        run: |
          # Check if this is a valid deployment trigger
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  test-suite:
    name: Production Test Suite
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}:ci
        env:
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            reports/

  build-production:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: [validate, test-suite]
    if: always() && needs.validate.outputs.should_deploy == 'true' && (needs.test-suite.result == 'success' || github.event.inputs.skip_tests == 'true')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=production
            type=raw,value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ needs.validate.outputs.version }}
          platforms: linux/amd64,linux/arm64

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production" >> $GITHUB_OUTPUT

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build-production]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://lanka.com
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create backup before deployment
        id: backup
        run: |
          BACKUP_NAME="pre-deploy-$(date +%Y%m%d-%H%M%S)"
          kubectl create job --from=cronjob/db-backup backup-$BACKUP_NAME -n production
          kubectl wait --for=condition=complete --timeout=600s job/backup-$BACKUP_NAME -n production
          echo "backup_name=$BACKUP_NAME" >> $GITHUB_OUTPUT

      - name: Update deployment manifest
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ needs.build-production.outputs.image }}@${{ needs.build-production.outputs.digest }}|g" k8s/production/deployment.yaml
          sed -i "s|VERSION_PLACEHOLDER|${{ needs.validate.outputs.version }}|g" k8s/production/deployment.yaml

      - name: Apply database migrations
        id: migration
        run: |
          kubectl create job --from=cronjob/db-migration migration-${{ needs.validate.outputs.version }} -n production
          kubectl wait --for=condition=complete --timeout=600s job/migration-${{ needs.validate.outputs.version }} -n production

      - name: Blue-Green Deployment
        id: deploy
        run: |
          # Get current deployment
          CURRENT_COLOR=$(kubectl get deployment lanka-api -n production -o jsonpath='{.metadata.labels.color}' || echo "blue")
          NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
          
          echo "Current color: $CURRENT_COLOR"
          echo "New color: $NEW_COLOR"
          echo "new_color=$NEW_COLOR" >> $GITHUB_OUTPUT
          echo "current_color=$CURRENT_COLOR" >> $GITHUB_OUTPUT
          
          # Update deployment with new color
          sed -i "s|COLOR_PLACEHOLDER|$NEW_COLOR|g" k8s/production/deployment.yaml
          
          # Deploy new version
          kubectl apply -f k8s/production/deployment.yaml -n production
          kubectl rollout status deployment/lanka-api-$NEW_COLOR -n production --timeout=600s

      - name: Health check
        run: |
          # Wait for new deployment to be healthy
          sleep 30
          
          # Run health checks against new deployment
          kubectl run health-check-${{ needs.validate.outputs.version }} \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=production \
            -- curl -f http://lanka-api-${{ steps.deploy.outputs.new_color }}/health
          
          # Additional smoke tests
          npm run test:smoke -- --baseUrl=http://lanka-api-${{ steps.deploy.outputs.new_color }}
        timeout-minutes: 5

      - name: Switch traffic
        run: |
          # Update service to point to new deployment
          kubectl patch service lanka-api -n production -p '{"spec":{"selector":{"color":"${{ steps.deploy.outputs.new_color }}"}}}'
          
          # Wait for traffic switch
          sleep 30
          
          # Verify production health
          kubectl run traffic-check-${{ needs.validate.outputs.version }} \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=production \
            -- curl -f https://lanka.com/health

      - name: Cleanup old deployment
        run: |
          # Scale down old deployment
          kubectl scale deployment lanka-api-${{ steps.deploy.outputs.current_color }} --replicas=0 -n production || true
          
          # Keep old deployment for potential rollback
          kubectl annotate deployment lanka-api-${{ steps.deploy.outputs.current_color }} \
            deployment.kubernetes.io/previous-version="${{ needs.validate.outputs.version }}" \
            -n production || true

      - name: Update deployment status
        run: |
          kubectl annotate deployment lanka-api-${{ steps.deploy.outputs.new_color }} -n production \
            deployment.kubernetes.io/revision-history-limit="10" \
            deployment.kubernetes.io/last-successful-deploy="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            deployment.kubernetes.io/version="${{ needs.validate.outputs.version }}"

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "✅ Production deployment successful",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Version",
                  "value": "${{ needs.validate.outputs.version }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "Backup",
                  "value": "${{ steps.backup.outputs.backup_name }}",
                  "short": true
                }]
              }]
            }

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && needs.deploy-production.result == 'failure'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Rollback deployment
        run: |
          # Get previous deployment
          CURRENT_COLOR=$(kubectl get service lanka-api -n production -o jsonpath='{.spec.selector.color}')
          PREVIOUS_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
          
          # Switch traffic back
          kubectl patch service lanka-api -n production -p "{\"spec\":{\"selector\":{\"color\":\"$PREVIOUS_COLOR\"}}}"
          
          # Scale up previous deployment
          kubectl scale deployment lanka-api-$PREVIOUS_COLOR --replicas=3 -n production
          kubectl rollout status deployment/lanka-api-$PREVIOUS_COLOR -n production --timeout=300s

      - name: Rollback database
        run: |
          # Restore from backup if needed
          BACKUP_NAME=$(kubectl get jobs -n production -l app=backup --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')
          kubectl create job --from=job/$BACKUP_NAME restore-rollback-$(date +%s) -n production

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#production-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "🚨 Production deployment failed - ROLLBACK INITIATED",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "Action",
                  "value": "Automatic Rollback",
                  "short": true
                }]
              }]
            }

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Cleanup old resources
        run: |
          # Remove completed migration jobs older than 7 days
          kubectl delete jobs -n production -l app=migration --field-selector='status.conditions[0].type=Complete' \
            $(kubectl get jobs -n production -l app=migration -o jsonpath='{.items[?(@.status.conditions[0].lastTransitionTime<"'$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)'")].metadata.name}') || true
          
          # Remove old backup jobs (keep last 30)
          kubectl get jobs -n production -l app=backup --sort-by=.metadata.creationTimestamp -o name | head -n -30 | xargs -r kubectl delete -n production || true