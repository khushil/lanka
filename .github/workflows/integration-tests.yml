name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  NEO4J_VERSION: '5-community'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-suite: 
          - cross-module-flows
          - api-integration
          - database-integration
          - realtime-integration
          - performance-integration
          - error-scenarios

    services:
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_dbms_memory_pagecache_size: 1G
          NEO4J_dbms_memory_heap_initial__size: 1G
          NEO4J_dbms_memory_heap_max__size: 2G
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g artillery

    - name: Wait for services to be ready
      run: |
        # Wait for Neo4j
        timeout 60s bash -c 'until cypher-shell -u neo4j -p testpassword "RETURN 1"; do sleep 2; done'
        
        # Wait for MongoDB
        timeout 60s bash -c 'until mongosh mongodb://test:testpassword@localhost:27017/admin --eval "db.runCommand({ping: 1})"; do sleep 2; done'
        
        # Wait for Redis
        timeout 60s bash -c 'until redis-cli -h localhost ping; do sleep 2; done'

    - name: Setup test environment
      run: |
        # Set test environment variables
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "NEO4J_TEST_URI=bolt://localhost:7687" >> $GITHUB_ENV
        echo "NEO4J_TEST_USER=neo4j" >> $GITHUB_ENV
        echo "NEO4J_TEST_PASSWORD=testpassword" >> $GITHUB_ENV
        echo "MONGODB_TEST_URI=mongodb://test:testpassword@localhost:27017/test" >> $GITHUB_ENV
        echo "REDIS_TEST_URI=redis://localhost:6379" >> $GITHUB_ENV

    - name: Initialize test database
      run: |
        # Create Neo4j constraints and indexes for testing
        cypher-shell -u neo4j -p testpassword << 'EOF'
        CREATE CONSTRAINT requirement_id IF NOT EXISTS FOR (r:Requirement) REQUIRE r.id IS UNIQUE;
        CREATE CONSTRAINT architecture_decision_id IF NOT EXISTS FOR (a:ArchitectureDecision) REQUIRE a.id IS UNIQUE;
        CREATE CONSTRAINT project_id IF NOT EXISTS FOR (p:Project) REQUIRE p.id IS UNIQUE;
        CREATE CONSTRAINT stakeholder_id IF NOT EXISTS FOR (s:Stakeholder) REQUIRE s.id IS UNIQUE;
        CREATE INDEX requirement_type_idx IF NOT EXISTS FOR (r:Requirement) ON (r.type);
        CREATE INDEX requirement_status_idx IF NOT EXISTS FOR (r:Requirement) ON (r.status);
        CREATE INDEX architecture_decision_status_idx IF NOT EXISTS FOR (a:ArchitectureDecision) ON (a.status);
        EOF

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-test-coverage

    - name: Run specific integration test suite
      run: |
        case "${{ matrix.test-suite }}" in
          "cross-module-flows")
            npm test tests/integration/cross-module-flows.test.ts
            ;;
          "api-integration")
            npm test tests/integration/api-integration.test.ts
            ;;
          "database-integration")
            npm test tests/integration/database-integration.test.ts
            ;;
          "realtime-integration")
            npm test tests/integration/realtime-integration.test.ts
            ;;
          "performance-integration")
            npm test tests/integration/performance-integration.test.ts
            ;;
          "error-scenarios")
            npm test tests/integration/error-scenarios.test.ts
            ;;
          *)
            echo "Unknown test suite: ${{ matrix.test-suite }}"
            exit 1
            ;;
        esac

    - name: Run performance load tests (performance suite only)
      if: matrix.test-suite == 'performance-integration'
      run: |
        # Start the application in test mode
        npm run build
        npm run dev &
        APP_PID=$!
        
        # Wait for application to start
        timeout 60s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        
        # Run Artillery load tests
        artillery run tests/performance/load-test.yml --output performance-report.json
        artillery report performance-report.json --output performance-report.html
        
        # Stop the application
        kill $APP_PID || true

    - name: Upload performance reports
      if: matrix.test-suite == 'performance-integration'
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          performance-report.json
          performance-report.html

    - name: Generate integration test report
      if: always()
      run: |
        # Generate test report with coverage data
        npm run test:coverage -- --testMatch="tests/integration/${{ matrix.test-suite }}.test.ts" --coverage --coverageReporters=json-summary

    - name: Upload integration test coverage
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-summary.json
        flags: integration-tests-${{ matrix.test-suite }}
        name: integration-test-coverage-${{ matrix.test-suite }}

    - name: Store test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          coverage/
          logs/
          *.log

    - name: Cleanup test data
      if: always()
      run: |
        # Cleanup test databases
        cypher-shell -u neo4j -p testpassword << 'EOF'
        MATCH (n) WHERE n.id STARTS WITH "test-" DETACH DELETE n;
        MATCH (n) WHERE n.id STARTS WITH "perf-test-" DETACH DELETE n;
        EOF
        
        # Clean up any remaining processes
        pkill -f "npm run dev" || true

  # Aggregate job to ensure all integration tests pass
  integration-tests-complete:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()
    
    steps:
    - name: Check integration test results
      run: |
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "All integration tests passed!"
          exit 0
        else
          echo "Some integration tests failed!"
          exit 1
        fi

  # Nightly comprehensive test run
  nightly-comprehensive:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    services:
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_dbms_memory_pagecache_size: 2G
          NEO4J_dbms_memory_heap_initial__size: 2G
          NEO4J_dbms_memory_heap_max__size: 4G
        ports:
          - 7474:7474
          - 7687:7687

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run comprehensive test suite
      run: npm run test:all
      env:
        NODE_ENV: test
        NEO4J_TEST_URI: bolt://localhost:7687
        NEO4J_TEST_USER: neo4j
        NEO4J_TEST_PASSWORD: testpassword

    - name: Generate comprehensive coverage report
      run: npm run test:coverage

    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: comprehensive-nightly
        name: nightly-comprehensive-coverage

    - name: Generate test summary report
      run: |
        echo "# Nightly Integration Test Summary" > test-summary.md
        echo "## Date: $(date)" >> test-summary.md
        echo "## Coverage Summary" >> test-summary.md
        cat coverage/coverage-summary.json | jq -r '.total | to_entries[] | "- \(.key): \(.value.pct)%"' >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: nightly-test-summary
        path: test-summary.md

    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#development'
        text: 'Nightly integration tests failed! Please check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security and dependency scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency vulnerability scan
      run: npx audit-ci --moderate

    - name: Check for outdated dependencies
      run: npm outdated || true

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD